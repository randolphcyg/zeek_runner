// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: api/pb/zeek_runner.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ZeekAnalysisService_Analyze_FullMethodName = "/zeek_runner.ZeekAnalysisService/Analyze"
)

// ZeekAnalysisServiceClient is the client API for ZeekAnalysisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZeekAnalysisServiceClient interface {
	Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error)
}

type zeekAnalysisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZeekAnalysisServiceClient(cc grpc.ClientConnInterface) ZeekAnalysisServiceClient {
	return &zeekAnalysisServiceClient{cc}
}

func (c *zeekAnalysisServiceClient) Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error) {
	out := new(AnalyzeResponse)
	err := c.cc.Invoke(ctx, ZeekAnalysisService_Analyze_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZeekAnalysisServiceServer is the server API for ZeekAnalysisService service.
// All implementations must embed UnimplementedZeekAnalysisServiceServer
// for forward compatibility
type ZeekAnalysisServiceServer interface {
	Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error)
	mustEmbedUnimplementedZeekAnalysisServiceServer()
}

// UnimplementedZeekAnalysisServiceServer must be embedded to have forward compatible implementations.
type UnimplementedZeekAnalysisServiceServer struct {
}

func (UnimplementedZeekAnalysisServiceServer) Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (UnimplementedZeekAnalysisServiceServer) mustEmbedUnimplementedZeekAnalysisServiceServer() {}

// UnsafeZeekAnalysisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZeekAnalysisServiceServer will
// result in compilation errors.
type UnsafeZeekAnalysisServiceServer interface {
	mustEmbedUnimplementedZeekAnalysisServiceServer()
}

func RegisterZeekAnalysisServiceServer(s grpc.ServiceRegistrar, srv ZeekAnalysisServiceServer) {
	s.RegisterService(&ZeekAnalysisService_ServiceDesc, srv)
}

func _ZeekAnalysisService_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeekAnalysisServiceServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZeekAnalysisService_Analyze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeekAnalysisServiceServer).Analyze(ctx, req.(*AnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZeekAnalysisService_ServiceDesc is the grpc.ServiceDesc for ZeekAnalysisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZeekAnalysisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zeek_runner.ZeekAnalysisService",
	HandlerType: (*ZeekAnalysisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _ZeekAnalysisService_Analyze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pb/zeek_runner.proto",
}
