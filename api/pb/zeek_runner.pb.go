// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v5.29.3
// source: api/pb/zeek_runner.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 请求体
type AnalyzeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID               string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`                              // 任务ID
	Uuid                 string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`                                  // UUID
	OnlyNotice           bool   `protobuf:"varint,3,opt,name=onlyNotice,proto3" json:"onlyNotice,omitempty"`                     // 是否只生成notice日志
	PcapID               string `protobuf:"bytes,4,opt,name=pcapID,proto3" json:"pcapID,omitempty"`                              // pcap文件ID
	PcapPath             string `protobuf:"bytes,5,opt,name=pcapPath,proto3" json:"pcapPath,omitempty"`                          // pcap文件路径
	ScriptID             string `protobuf:"bytes,6,opt,name=scriptID,proto3" json:"scriptID,omitempty"`                          // 脚本ID
	ScriptPath           string `protobuf:"bytes,7,opt,name=scriptPath,proto3" json:"scriptPath,omitempty"`                      // 脚本路径
	ExtractedFilePath    string `protobuf:"bytes,8,opt,name=extractedFilePath,proto3" json:"extractedFilePath,omitempty"`        // 提取文件存储路径
	ExtractedFileMinSize int32  `protobuf:"varint,9,opt,name=extractedFileMinSize,proto3" json:"extractedFileMinSize,omitempty"` // 提取文件最小大小(KB)
}

func (x *AnalyzeRequest) Reset() {
	*x = AnalyzeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_zeek_runner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeRequest) ProtoMessage() {}

func (x *AnalyzeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_zeek_runner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_zeek_runner_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyzeRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *AnalyzeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AnalyzeRequest) GetOnlyNotice() bool {
	if x != nil {
		return x.OnlyNotice
	}
	return false
}

func (x *AnalyzeRequest) GetPcapID() string {
	if x != nil {
		return x.PcapID
	}
	return ""
}

func (x *AnalyzeRequest) GetPcapPath() string {
	if x != nil {
		return x.PcapPath
	}
	return ""
}

func (x *AnalyzeRequest) GetScriptID() string {
	if x != nil {
		return x.ScriptID
	}
	return ""
}

func (x *AnalyzeRequest) GetScriptPath() string {
	if x != nil {
		return x.ScriptPath
	}
	return ""
}

func (x *AnalyzeRequest) GetExtractedFilePath() string {
	if x != nil {
		return x.ExtractedFilePath
	}
	return ""
}

func (x *AnalyzeRequest) GetExtractedFileMinSize() int32 {
	if x != nil {
		return x.ExtractedFileMinSize
	}
	return 0
}

// 响应体
type AnalyzeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID     string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`         // 任务ID
	Uuid       string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`             // UUID
	PcapPath   string `protobuf:"bytes,3,opt,name=pcapPath,proto3" json:"pcapPath,omitempty"`     // pcap文件路径
	ScriptPath string `protobuf:"bytes,4,opt,name=scriptPath,proto3" json:"scriptPath,omitempty"` // 脚本路径
	StartTime  string `protobuf:"bytes,5,opt,name=startTime,proto3" json:"startTime,omitempty"`   // 任务开始时间
}

func (x *AnalyzeResponse) Reset() {
	*x = AnalyzeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_zeek_runner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeResponse) ProtoMessage() {}

func (x *AnalyzeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_zeek_runner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeResponse) Descriptor() ([]byte, []int) {
	return file_api_pb_zeek_runner_proto_rawDescGZIP(), []int{1}
}

func (x *AnalyzeResponse) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *AnalyzeResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AnalyzeResponse) GetPcapPath() string {
	if x != nil {
		return x.PcapPath
	}
	return ""
}

func (x *AnalyzeResponse) GetScriptPath() string {
	if x != nil {
		return x.ScriptPath
	}
	return ""
}

func (x *AnalyzeResponse) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

var File_api_pb_zeek_runner_proto protoreflect.FileDescriptor

var file_api_pb_zeek_runner_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x62, 0x2f, 0x7a, 0x65, 0x65, 0x6b, 0x5f, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x7a, 0x65, 0x65, 0x6b,
	0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0xae, 0x02, 0x0a, 0x0e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x63, 0x61, 0x70, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x63, 0x61, 0x70, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x63, 0x61, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x63, 0x61, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x0f, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x63, 0x61, 0x70,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x63, 0x61, 0x70,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x32, 0x5d, 0x0a, 0x13, 0x5a, 0x65, 0x65, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x12, 0x1b, 0x2e, 0x7a, 0x65, 0x65, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x7a, 0x65, 0x65, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x14, 0x5a, 0x12, 0x7a, 0x65, 0x65, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_pb_zeek_runner_proto_rawDescOnce sync.Once
	file_api_pb_zeek_runner_proto_rawDescData = file_api_pb_zeek_runner_proto_rawDesc
)

func file_api_pb_zeek_runner_proto_rawDescGZIP() []byte {
	file_api_pb_zeek_runner_proto_rawDescOnce.Do(func() {
		file_api_pb_zeek_runner_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_pb_zeek_runner_proto_rawDescData)
	})
	return file_api_pb_zeek_runner_proto_rawDescData
}

var file_api_pb_zeek_runner_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_api_pb_zeek_runner_proto_goTypes = []interface{}{
	(*AnalyzeRequest)(nil),  // 0: zeek_runner.AnalyzeRequest
	(*AnalyzeResponse)(nil), // 1: zeek_runner.AnalyzeResponse
}
var file_api_pb_zeek_runner_proto_depIdxs = []int32{
	0, // 0: zeek_runner.ZeekAnalysisService.Analyze:input_type -> zeek_runner.AnalyzeRequest
	1, // 1: zeek_runner.ZeekAnalysisService.Analyze:output_type -> zeek_runner.AnalyzeResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_pb_zeek_runner_proto_init() }
func file_api_pb_zeek_runner_proto_init() {
	if File_api_pb_zeek_runner_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_pb_zeek_runner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_zeek_runner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_pb_zeek_runner_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_pb_zeek_runner_proto_goTypes,
		DependencyIndexes: file_api_pb_zeek_runner_proto_depIdxs,
		MessageInfos:      file_api_pb_zeek_runner_proto_msgTypes,
	}.Build()
	File_api_pb_zeek_runner_proto = out.File
	file_api_pb_zeek_runner_proto_rawDesc = nil
	file_api_pb_zeek_runner_proto_goTypes = nil
	file_api_pb_zeek_runner_proto_depIdxs = nil
}
